ac_bot_ai.cpp:
Fonction pour choisir arme à utiliser en fonction de la distance par rapport à l'ennemi
Fonction pour rechercher des entités, en fonction de sa distance par rapport au bot, à sa visibilité par rapport au bot, et au fait que ça soit une source de munitions
Fonction pour se diriger vers une entité choisie, en utilisant le pathfinding

bot_ai.cpp:
GetPos: Fonction pour obtenir les coordonnées d'un ennemi à partir de son entité, la position étant modifiée par un "bruit" plus ou moins important selon la difficulté du bot
DetectEnemy: Fonction pour détecter un ennemi à partir de son entité, si il est dans le champ de vision, ou si il est à la distance relative à la difficulté où le bot détecte toujours
FindEnemy: Fonction pour chercher un ennemi, retourne si il en a trouvé un
CheckHunt: Fonction pour vérifier si le bot a déjà une cible
HuntEnemy: Se dirige vers l'ennemi
CheckWeaponSwitch: Vérifie si le bot est en train de changer d'arme
ShootEnemy: Fonction pour tirer sur l'ennemi, vérifie si il y a un ennemi, s'il est visible, vise l'ennemi, et tire, le délai de tir et la précision du tir changeant en fonction de la difficulté du bot
GetShootDelay: Récupère les valeurs minimales et maximales de délai en fonction de l'arme choisie et de la difficulté du bot, fait un random entre ces deux valeurs, et le retourne (valeurs en ms)
CheckReload: Si il n'y a pas d'ennemi aux alentours, recharge l'arme
CheckScope: Si le bot utilise un sniper, il choisit de viser avec ou pas, selon la distance par rapport à l'ennemi
MainAI: Fait correspondre toutes les fonctions du code, en faisant vraiment jouer le bot (partie IA à proprement parler)
DoCombatNav: Choisis si le bot doit se déplacer (en fonction des mouvements de tête nécessaire/skills du bot), si il doit sauter(avec un délai), et si le bot est au dessus de son ennemi, de s'en échapper. Il essayera aussi de trouver des items, et si il a beaucoup de skills et un ennemi proche, il fera un petit saut pour éviter de gros dégâts
CheckStuck: Vérifie si le bot éprouve des difficultés à se déplacer
CheckJump: Vérifie si le bot peut sauter
CheckStrafe: Vérifie si le bot peut se déplacer sur le côté
CheckFOV: Détecte les murs, avec certaines hauteurs de mur
WaterNav: Utilisé par le bot pour se déplacer sous l'eau
CheckItems: Vérifie si le bot a des armes
IsUnreachableList: Vérifie si l'entité n'est pas atteignable
IsReachable: Vérifie si une certaine position est atteignable
HearSound: Si le bot n'a pas de cible, alors il regarde si le son est intéressant(eg: bruit de pas), et en déduis une potentielle position ennemie
IsInFOV: Vérifie si une position est dans le champ de vision du bot

bot_util.cpp:
lrand, lsrand, RandomLong, RandomFloat: Fonction aléatoires
AnglesToVector: Permet d'effectuer une conversion d'un angle vers un vecteur
WrapXAngle: Permet d'empecher le bot de se tordre le cou
WrapYZAngle: Permet d'optimiser les rotations du bot
TraceLine: Permet de savoir ce qui se situe au bout du curseur
GetDistance, Get2DDistance: Obtient des distances
IsVisible: Permet de voir si il y a quelque chose dans le viseur
PredictPos: Permet au bot de prévoir la position de son ennemi
IsValidFile: Permet de vérifier la validité d'un fichier(pathfinding?)
FileIsOlder: Plus utilisé
Normalize: Normalise un vecteur
GetYawDiff: A partir d'un angle et de deux vecteurs, retourne la différence de rotation
CrossProduct: Effectue un produit en croix à partir de deux vecteurs
GetDirection: Retourne la direction du bot
GetCubeFloor, GetCubeHeight: Renvoie des infos sur un cube
SkillNrToSkillName: Retourne le nom du niveau de difficulté(skills du bot) par rapport à son numéro
IsInGame: Dit si l'entité envoyée est toujours présente dans la partie
